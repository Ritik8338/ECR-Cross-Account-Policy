name: "Terraform"

'on':
  push:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: src
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
      
      - name: Terraform Apply
        run: terraform apply -auto-approve

  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_demo
        IMAGE_TAG: demo_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-Python@v2
        with:
          Python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install -U sphinx
          python -m pip install sphinx-rtd-theme
          # python -m pip install sphinxcontrib-apidoc
          python -m pip install sphinx-autoapi

      - name: make the sphinx docs
        run: |
          make -C docs clean 
          # sphinx-apidoc -f -o docs/source . -H Test -e -t docs/source/_templates
          make -C docs html

      - name: Init new repo in dist folder and commit generated files
        run: |
          cd docs/build/html/
          git init
          touch .nojekyll
          git add -A
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m 'deploy' 

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-Python@v2
        with:
          Python-version: 3.x

      - name: Install Pylint
        run: pip install pylint

      - name: run Pylint
        run: pylint --disable=all --enable=unused-import $(git ls-files '*.py')

  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-Python@v2
        with:
          Python-version: 3.x

      - name: Install Black
        run: pip install black

      - name: Run Black
        run: black .

      - name: Check Black difference
        run: black --diff --check $(git ls-files '*.py')

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-Python@v2
        with:
          Python-version: 3.x

      - name: Install pytest
        run: pip install pytest

      - name: Run pytest
        run: pytest

      - name: Run unittest
        run: python -m unittest discover
